https://docs.google.com/document/d/1zRvBMIJiDpYt5LYhDxktLXFilLCN9dZh3BYaWSWg3Xg/edit

Basic translator: hamko
email: wakataberyo@gmail.com
Video: ٩(ˊᗜˋ*)و
Comments: 
high priority: needs to be done by 2020-01-11
custom challenge ordered by LINE

Status : [Basic translating | Basic translated | Proof-reading | Proof-read | Finalising | Finalized]

----
@@BEGIN_README
あなたは、在宅の利用者がレストランにオンライン注文して、家まで料理を配達してもらうことができるフードデリバリーシステムを構築することになった。システムにはアルバイトの配達員が登録されており、レストランが注文を受けた時に、システムが担当配達員を決めて料理を配達してもらう。このシステムの大まかな仕様は以下である。　
@@BEGIN_EN
You have been assigned to a project to build a food delivery system that allows users to order food online from a restaurant and have it delivered to their homes. Part-time delivery drivers are registered in the system, and the system determines which delivery person to assign a delivery to when the restaurant receives an order. The rough specifications of this system are as follows.
@@END_EN

システムには、複数の**レストラン**が登録されている。それぞれのレストランには、あらかじめ**レストランID**、**休業時間**と二次元地図上の**位置**が設定されている。また、料理を配達するための**配達員**もあらかじめシステムに登録されている。それぞれの配達員には**配達員ID**が設定されており、配達員の**状態** (**配達中**、**待機中**、**休憩中**のいずれか) 、**最大配達時間**、二次元地図上の**位置**などがシステムに管理される。
@@BEGIN_EN
Multiple **restaurants** are initially registered in the system. Each restaurant has a **restaurant ID**, **closing hours**, and **location** on a 2D map. Also, **drivers** that deliver the food are registered in the system in advance. Each driver is assigned a **driver ID**, and the system manages the driver's **status** (either **delivering**, **available**, or **unavailable**), **maximum delivery time**, and **location** on the 2D map.
@@END_EN

**利用者**は、開店中のレストランに料理を**注文**できる (`order`クエリ)。レストランが休業時間内でなく、かつ料理を配達できる配達員がいれば、その注文は受理される。注文が受理された場合、利用者はレストランに料理の**注文金額**を払う。また、注文が受理されると、システムは待機中の配達員の中から最も適切な一人を**担当配達員**として選んで配達中の状態に設定する。担当配達員は、選ばれた時点で**配達距離**に応じた**送料**を前払いでレストランから受け取る。配達員が配達しおえたら、システムに自分の配達員IDと位置を通知して、待機中状態に設定してもらう (`set_available`クエリ)。
@@BEGIN_EN
**Users** can **order** food from an open restaurant (`order` query). If the restaurant is open and there is at least one driver near the restaurant who can deliver the food, the order will be accepted. When the order is accepted, the user pays the **order amount** for the food. Then, the system chooses the most suitable driver from the available drivers as the **assigned driver** and sets his/her status to delivering. When the driver is assigned to a delivery, he/she will receive a **delivery fee** in advance from the restaurant based on the **delivery distance**. When the driver finishes delivering, he/she notifies the system of his/her driver ID and location to set his/her status to “available” (`set_available` query).
@@END_EN

待機中の配達員は、一時的に配達依頼を受けないようにするために、システムに対して自分を休憩中状態にするためのリクエストを送ることができる (`set_unavailable`クエリ)。また配達員は、あまりに長距離の配達を拒否するために、システムに自分の最大配達時間を設定するためのリクエストを送ることもできる (`set_max_delivery_time`クエリ)。
@@BEGIN_EN
An available driver can send a request to the system to put him/herself in the “unavailable” state in order to temporarily not receive delivery requests (`set_unavailable` query). A driver can also send a request to the system to set his/her maximum delivery time in order to reject deliveries that would take too long (`set_max_delivery_time` query).
@@END_EN

ただし、本システムは金銭に関わるため、詳細な仕様を理解して正確に実装する必要がある。上記の説明では、それぞれの条件の具体的な設定方法や、細かい仕様はまだ書かれていないことに注意せよ。
@@BEGIN_EN
Since this system involves money, you need to understand the detailed specifications and implement them accurately. Note that the above explanation does not yet describe the specifications in detail.
@@END_EN

構築すべきシステムが複雑なので、最も基礎的な機能に限定した「基本実装」というテストケースが用意されている。基本実装では、ほとんどの複雑な条件を読み飛ばしても実装できる。受験者は、基本実装をスキップして応用実装にチャレンジすることもできるが、**まず基本実装が動作することを確認してから応用実装に着手することを強く勧める**。
@@BEGIN_EN
Because of the complexity of the system that needs to be built, there are "Basic" test cases in which most of the complex conditions and portions of the implementation can be skipped. Candidates can attempt the entire implementation first, but it is **strongly recommended** that they first make sure that the program passes the basic tests before starting the full implementation.
@@END_EN

- 基本実装では、システムの最も基本的な機能を実装する。基本実装のためのテストケースでは、以下が保証される。
  - 配達員が 1 人以下しか現れない。
  - `order`クエリと`set_available`クエリしか与えられない。
  - レストランの休業時間はない。
@@BEGIN_EN
- The "Basic" test cases test that your program implements the most basic functionality of the system. The test cases for the basic implementation guarantee the following conditions:
  - At most one driver appears in the input.
  - Only `order` queries and `set_available` queries are given.
  - There are no hours at which the restaurant is closed.
@@END_EN

基本実装のプログラムは、「詳細な仕様」のセクションのタイトルに（基本実装）と書かれた項目だけを読んで作成できる。応用実装では、全てのクエリを実装する。それぞれのクエリが正しく実装されているかを確認するための秘密のテストが用意されているため、もし全てを実装しきれなくともなるべく多くを実装すること。
@@BEGIN_EN
A program that works for the "Basic" test cases can be created by reading only those items in the "Detailed Specifications" section that have “(Basic)” in their title. In the "Advanced" test cases, on the other hand, all queries need to be implemented. If you can't implement all of them, implement as many as possible. Also note that secret tests are run to verify that each query is implemented correctly after the program is submitted.
@@END_EN

## 詳細な仕様
### 日時 (基本実装・応用実装)
- **日付**は`YYYY-MM-DD`の形式で、**時刻**は`HH:MM`の形式で与えられる。日付と時刻のペア`YYYY-MM-DD HH:MM`を**日時**と呼ぶ。
  - `YYYY`は年を表す (`2020`以上`2099`以下の整数)
  - `MM`は月を表す (`01`以上`12`以下、2 桁に満たない場合は左ゼロ埋めされる)
  - `DD`は日を表す (`01`以上`31`以下、2 桁に満たない場合は左ゼロ埋めされる)
  - `HH`は 24 時間表記での時間を表す (`00`以上`23`以下、2 桁に満たない場合は左ゼロ埋めされる)
  - `MM`は分を表す (`00`以上`59`以下、2 桁に満たない場合は左ゼロ埋めされる)
  - ただし例外的に、時刻の範囲の終了時刻を表す時に限り、`HH:MM`が`24:00`となりえる。
  - 日付は、うるう年を考慮したグレゴリオ暦の正しい日付であることが保障される。
  - うるう秒は考慮しない。
@@BEGIN_EN
## Detailed specifications
### Date and time (Basic, Advanced)
- **Date** is given in the format `YYYY-MM-DD` and **time** is given in the format `HH:MM`. A date and time pair `YYYY-MM-DD HH:MM` is called a **date and time**.
  - `YYYY`: Year (An integer between `2020` and `2099`, inclusive.)
  - `MM`: Month (From `01` to `12`, inclusive. A leading zero is included if it is less than two digits.)
  - `DD`: Day (From `01` to `31`, inclusive. A leading zero is included if it is less than two digits.)
  - `HH`: Hour in 24-hour format (From `00` to `23`, inclusive. Leading zeros are included if it is less than two digits.)
  - `MM`: Minutes (Between `00` and `59`, inclusive. Leading zeros are included if it is less than two digits.)
  - As an exception, `HH:MM` can be `24:00` when it represents the end of a time range.
  - The date is guaranteed to be the correct date in the Gregorian calendar, taking leap years into account.
  - Leap seconds are not taken into account.
@@END_EN

### レストラン情報 (基本実装・応用実装)
- システムに登録されているレストランは m 店あり、**レストラン情報**によって入力される。
  - レストラン情報は、固有の**レストランID**と二次元地図上の**レストランの位置** (x [m], y [m]) と 0 個以上 4 個以下の**休業時間**から構成される。また、入力はこの順序で与えられる。
  ```plain
  レストランID x y 休業時間1 休業時間2 ...
  ```
  - レストランIDは、ちょうど 5 文字の半角小文字もしくは半角大文字アルファベットからなる文字列である (例: `cYUdf`)。同じレストランIDが複数のレストランに付いていないことが保障される。
  - レストランの数 m は、1 以上 100 以下であることが保障される。
  - 位置 x, y は、-10^9 以上 10^9 以下の整数であることが保障される。
  - 休業時間は、休業開始時刻と休業終了時刻を`-`で繋いだ`HH:MM-HH:MM`という形式である (例: `12:00-12:30`)。ただし、休業開始時刻ちょうどは休業時間に含まれるが、休業終了時間ちょうどは休業時間に含まれないものとする。
  - 後述される以下の全てのクエリで、レストラン情報に含まれないレストランIDが与えられることはない。
@@BEGIN_EN
### Restaurant Information (Basic, Advanced)
- There are \\(m\\) restaurants registered in the system in advance. Each restaurant has the **restaurant information** described below.
  - The restaurant information consists of a unique **restaurant ID**, the **location** \\((x [m], y [m])\\) of the restaurant on a 2D map, and periods of **restaurant closure** (from \\(0\\) to \\(4\\) periods). The restaurant information is represented as follows.
  ```plain
  {Restaurant ID} {x} {y} {Restaurant closure 1} {Restaurant closure 2} ...
  ````
  - The restaurant ID is a string of exactly five lowercase or uppercase letters (e.g., `cYUdf`). It is ensured that the same restaurant ID is not given to multiple restaurants.
  - The number of restaurants \\(m\\) is guaranteed to be between \\(1\\) and \\(100\\), inclusive.
  - Locations x and y are guaranteed to be integers between \\(-10^9\\) and \\(10^9\\), inclusive.
  - Periods of restaurant closure are in the form of `HH:MM-HH:MM`, where the start time and end time of the restaurant closure are separated by `-` (e.g., `12:00-12:30`). Note that the start time of the restaurant closure period is included in the closure period, but the end time of the restaurant closure period is not included in the closure period, as the restaurant reopens right at this time.
  - In all of the following queries described below, a non-existent restaurant ID is never included.
@@END_EN

### 配達員に関するクエリ (基本情報・応用実装)
- 配達員には、固有の**配達員ID**が設定されている。
  - 配達員IDは、1 文字以上 4 文字以下の半角小文字もしくは大文字アルファベットからなる文字列である (例: `Bob`)。
- 配達員は、**配達中**、**待機中**、**休憩中**のいずれかの状態を持つ。
  - システム稼働時、全ての配達員は休憩中である。
  - 待機中の配達員に限り、注文が入った時にレストランから配達を依頼されうる。
  - `set_available`クエリにより位置の更新を通知されない限り、システムは待機中の配達員の位置は、動かないものとみなす。

@@BEGIN_EN
### Query about drivers (Basic, Advanced)
- Each driver is assigned a unique **driver ID**.
  - The driver ID is a string of lowercase or uppercase letters \\(1\\) to \\(4\\) characters in length (e.g., `Bob`).
- A driver is in one of the following states: **delivering**, **available**, or **unavailable**.
  - When the system is initiated, all drivers are unavailable.
  - Only available drivers can be asked to deliver by the restaurant when an order is placed.
  - The system will assume that the location of an available delivery person has not changed unless he/she updates the location with a `set_available` query.
@@END_EN

- 配達員は、待機中状態に入ったことをシステムに伝えるために、`set_available`クエリを送る。`set_available`クエリは、日時、`set_available`という文字列、配達員ID、待機中状態に入った時点での配達員の二次元地図上の位置 (x [m], y [m]) を連結して構成される (半角スペース区切り)。
  ```plain
  YYYY-MM-DD HH:MM set_available 配達員ID x y
  ```
  - 位置 x, y は、-10^9 以上 10^9 以下の整数であることが保障される。
  - システムは`set_available`クエリを受けとったあと、以下に定められた処理を行う。
    - 配達員の状態が待機中でなければ、配達員の状態を待機中にし、配達員の位置を設定する。もし既に配達員の状態が待機中ならば、状態は変更せず、配達員の位置を更新する。
@@BEGIN_EN
- The driver sends a `set_available` query to tell the system that he/she has entered the “available” state. The `set_available` query consists of the date and time, the string `set_available`, the driver ID, and the driver's location \\((x [m], y [m])\\) on a 2D map at the time of entering the “available” state (separated by spaces).
  ```plain
  YYYY-MM-DD HH:MM set_available {Driver ID} x y
  ````
  - Locations x and y are guaranteed to be integers between \\(-10^9\\) and \\(10^9\\), inclusive.
  - When the system receives a `set_available` query, it performs the process below.
    - If the status of the driver is “unavailable” or “delivering”, it sets the status to “available” and sets the location of the driver. If the status of the driver is already set to “available”, the status is not changed and the location of the driver is updated.
@@END_EN

- 配達員は、休憩状態に入ったことをシステムに伝えるために、`set_unavailable`クエリを送る。`set_unavailable`クエリは、日時、`set_unavailable`という文字列、配達員ID を連結して構成される (半角スペース区切り)。
  ```plain
  YYYY-MM-DD HH:MM set_unavailable 配達員ID
  ```
  - システムは`set_unavailable`クエリを受けとったあと、クエリを受理するかを以下のように判定して、定められた処理を行う。
    - 配達員が待機中以外の状態の場合は、クエリは受理されない。この時、クエリの日時および`ERROR CANNOT SET UNAVAILABLE`という文字列をスペース区切りで出力する。
    - そうでなければクエリは受理され、配達員の状態を休憩中にする。
@@BEGIN_EN
- The driver sends a `set_unavailable` query to tell the system that he/she has entered the “unavailable” state. The `set_unavailable` query consists of the date and time, the string `set_unavailable`, and the driver ID (separated by spaces).
  ```plain
  YYYY-MM-DD HH:MM set_unavailable {Driver ID}
  ```
  - After the system receives a `set_unavailable` query, it determines whether to accept the query and performs the processing below.
    - If the driver is in a state other than “available”, the query will not be accepted. In this case, print the date and time of the query and the string `ERROR CANNOT SET UNAVAILABLE`, separated by a space.
    - Otherwise, the query is accepted and the status of the driver is set to “unavailable”.
@@END_EN

- 配達員は、あまりに長い配達時間の依頼を断るために、最大配達時間を設定することができる。
  - システムが注文を受理して担当配達員を選ぶ際に、最大配達時間が設定されていてかつ配達時間が最大配達時間を超える配達員は、配達員候補から除外される。
  - 初め、最大配達時間はどの配達員にも設定されていない。
  - 配達員の最大配達時間は、`set_max_delivery_time`クエリによって設定される。`set_max_delivery_time`クエリは、日時、`set_max_delivery_time`という文字列、配達員IDおよび最大配達時間 (分単位で指定) を連結して構成される (半角スペース区切り)。
  ```plain
  YYYY-MM-DD HH:MM set_max_delivery_time 配達員ID 最大配達時間
  ```
    - 最大配達時間は 1 以上 1000 以下の整数
@@BEGIN_EN
- A driver can set a maximum delivery time in order to reject a request that has a delivery time that is too long.
  - When the system accepts an order and chooses a driver, those drivers for whom the delivery time exceeds their maximum delivery time (for drivers who have a maximum delivery time set) are excluded from the list of potential assigned drivers.
  - Initially, the maximum delivery time is not set for any driver.
  - The maximum delivery time of a driver is set by the `set_max_delivery_time` query. The `set_max_delivery_time` query consists of the date and time, the string `set_max_delivery_time`, the driver ID, and the maximum delivery time in minutes (separated by spaces).
  ````plain
  YYYY-MM-DD HH:MM set_max_delivery_time {Driver ID} {Maximum delivery time}
  ````
    - Maximum delivery time is an integer between \\(1\\) and \\(1000\\), inclusive.
@@END_EN

- 担当配達員は、まずレストランに移動して料理を集荷し、その後注文者の位置に移動して料理を渡すことで配達する。
  - 二点間の移動は、マンハッタン距離を時速 10 km で移動するものとみなす。
    - マンハッタン距離は、一点が (x_r, y_r)、もう一点が (x_u, y_u) とした時、|x_r-x_u|+|y_r-y_u| で定義される。
  - **配達距離**は、配達員の位置→レストランの位置→配達先の位置と移動した場合の、マンハッタン距離の和である。
  - **配達時間**は、配達距離を時速 10 km の速度で移動したときにかかる時間である。
@@BEGIN_EN
- An assigned driver delivers food by first going to the restaurant location to pick up the food and then going to the location of the user to deliver the food.
  - It is assumed that the distance drivers move is the Manhattan distance between two points and he/she moves at a speed of \\(10\\) km/h.
    - The Manhattan distance between two points is defined as \\(|x_r-x_u|+|y_r-y_u|\\), where one point is \\((x_r, y_r)\\) and the other is \\((x_u, y_u)\\).
  - **Delivery distance** is the sum of the Manhattan distances of moving (1) from the driver's location to the restaurant location and (2) from the restaurant location to the delivery destination location.
  - **Delivery time** is the time it will take to travel the delivery distance at a speed of \\(10\\) km/h.
@@END_EN

### 注文に関するクエリ (基本実装・応用実装)
- 利用者が注文をするときには、注文先のレストランID、注文金額と配達先の位置をシステムに送る。
@@BEGIN_EN
### Queries about Orders (Basic, Advanced)
- When a user places an order, he/she sends the restaurant ID, the order cost, and the delivery destination location to the system.
@@END_EN

- レストランが注文を受けたら、以下で定義される**配達員候補**から**担当配達員**を選ぶ。
  - 配達員候補は、以下を全て満たす配達員である。
    - 待機中である。
    - 配達員のレストランへの到着予想時刻が、レストランの営業時間内である。ただし、到着予想時刻とは注文を受けた時刻に、レストランとその配達員との間のマンハッタン距離を時速 10 km で移動する場合の時間を足した時刻である。
    - 配達時間が、配達員の最大配達時間以内である。
  - 配達員候補のうち、配達時間が最も短い配達員を**担当配達員**として選ぶ。ただし、そのような候補が複数いる場合、その中で直近での待機中の状態が最も長い配達員を選ぶ。
    - この問題で与えられるクエリの時刻は相違であるため、待機時間が同じということはない。
  - 配達員候補が一人もいない場合は、担当配達員を選ぶことができない。
@@BEGIN_EN
- When a restaurant receives an order, it chooses an **assigned driver** from the potential assigned drivers defined below.
  - A potential assigned driver is a driver who satisfies all of the following:
    - He/she is available.
    - The arrival time of the driver at the restaurant is outside of any of the restaurant's closure periods. The arrival time is defined as the time of receipt of the order plus the time required to travel from the driver's location to the restaurant's location, in a Manhattan distance at a speed of \\(10\\) km/h.
    - The delivery time does not exceed the maximum delivery time of the driver.
  - The system chooses the driver for whom the delivery time would be the shortest from among the potential assigned drivers. If multiple drivers have the same shortest delivery time, then the driver whose status has been “available” longest in the period up to the present will be chosen as the assigned driver.
    - Note that in this problem the period up to the present in which a driver’s status is “available” will always be different for each driver since each query time is guaranteed to be different in this problem.
  - If there are no potential assigned drivers, then no assigned driver is chosen.
@@END_EN

- システムは、利用者から注文クエリ (`order`クエリ) の形で注文を受け取る。注文クエリは、日時、`order`という文字列、レストランID、注文金額および利用者の二次元地図上の位置 (x [m], y [m]) からなる。また、この順序で半角スペース区切りで入力される。
  ```plain
  YYYY-MM-DD HH:MM order レストランID 注文金額 x y
  ```
  - 位置 x, y は、-10^9 以上 10^9 以下の整数
  - 注文金額は、1 円以上 100000 円以下の整数
- システムは注文クエリを受け取ったあと、注文クエリを受理するかを**以下の順序で**判定して、以下に定められた出力を行う。
  - クエリの時刻が休業時間である場合は、注文は受理されない。この時、クエリの日時および`ERROR CLOSED TIME`という文字列をスペース区切りで出力する。
  - 担当配達員を選ぶことができない場合は、注文は受理されない。この時、クエリの日時および`ERROR NO DELIVERY PERSON`という文字列をスペース区切りで出力する。
  - 上記のどれでもなければ注文は受理される。この時、システムは担当配達員を配達中状態にし、クエリの日時と担当配達員と送料をスペース区切りで出力する。送料は、配達距離と以下の表で定められる。
@@BEGIN_EN
- The system receives an order from the user in the form of an `order` query. The order query consists of the date and time, the string `order`, the restaurant ID, the order cost, and the user's location \\((x [m], y [m])\\) on a 2D map. The information is placed in this order, separated by single-byte spaces.
  ```plain
  YYYY-MM-DD HH:MM order {Restaurant ID} {Order cost} x y
  ```
  - x, y: Location on a 2D map, integers between \\(-10^9\\) and \\(10^9\\), inclusive.
  - The order cost is an integer between \\(1\\) yen and \\(100000\\) yen.
- After the system receives the `order` query, it determines whether to accept the order query **in the following order** and performs the processing below.
  - If the time of the query is in a restaurant closure period, the order will not be accepted. In this case, print the date and time of the query and the string `ERROR CLOSED TIME`, separated by a space.
  - If the system cannot find a suitable driver to assign, the order will not be accepted. In this case, print the date and time of the query and the string `ERROR NO DELIVERY PERSON`, separated by a space.
  - Otherwise, the order will be accepted. In this case, the system will put the driver in the “delivering” state, and print the date and time of the query, the assigned driver, and the delivery cost separated by a space. The delivery cost is determined by the delivery distance and the following table.
@@END_EN

  | 配達距離          | 送料          |
  |:-------------------:|:------------:|
  | 0 m 以上 100 m 未満       | 300 円 |
  | 100 m 以上 1000 m 未満 | 600 円 |
  | 1000 m 以上 10000 m 未満     |  900 円 |
  | 10000 m 以上     |  1200 円 |

@@BEGIN_EN
  | delivery distance          | delivery cost          |
  |:-------------------:|:------------:|
  | 0 m or more and less than 100 m       | 300 yen |
  | 100 m or more and less than 1000 m  | 600 yen |
  | 1000 m or more and less than 10000 m      |  900 yen |
  | 10000 m or more   |  1200 yen |
@@END_EN

- 注文が受理される時、以下の金額をクエリの日時で担当配達員とレストランの**売上**に計上する。
  - 担当配達員は、レストランから配達距離に応じた送料を、レストランから受け取る。担当配達員は、この送料を売上に計上する。
  - レストランは、注文金額から送料を引いた額を売上に計上する。

@@BEGIN_EN
- When the order is accepted, the following amounts will be recorded as the restaurant's sales and the assigned driver's wages, at the time of the accepted `order` query.
  - The assigned driver receives a delivery fee from the restaurant based on the delivery distance. This delivery fee will be recorded as the wages of the driver.
  - The order cost of the order minus the delivery fee is recorded as the sales of the restaurant.
@@END_EN

### 売上の集計 (応用実装)
- システムは、レストランから特定の期間の売上を合計するための`calculate_sales`クエリを受け取る。
  - このクエリは、クエリの日時、`calculate_sales`という文字列、レストランID、集計開始日時、集計終了日時で構成される (半角スペース区切り)。ただし集計区間の両端については、集計開始日時は区間に含み、集計終了日時は区間に含まないものとする。
  ```plain
  YYYY-MM-DD HH:MM calculate_sales レストランID YYYY-MM-DD HH:MM YYYY-MM-DD HH:MM
  ```
  - クエリを受け取ったら、集計開始日時から集計終了日時までのレストランの売上を合計する。そして、クエリの日時、`SALES`という文字列および売上の合計をスペース区切りで出力する。
  - 例
    - `2020-12-01 13:34 calculate_sales 3cg8d 2020-10-31 17:00 2020-10-31 24:00`は、`2020-10-31 17:00`から`2020-10-31 24:00` (=`2020-10-31`の深夜 24 時) までに計上された、レストラン`3cg8d`の売上を集計して出力する。
@@BEGIN_EN
### Tallying up sales (Advanced)
- The system receives a `calculate_sales` query from a restaurant to tally up the sales for a specific period.
  - This query consists of the date and time of the query, the string `calculate_sales`, the restaurant ID, and the start and end date and time of the aggregation, separated by spaces. Note that the start date and time is included in the period, but the end date and time is not included in the period.
  ```plain
  YYYY-MM-DD HH:MM calculate_sales {Restaurant ID} YYYY-MM-DD HH:MM YYYY-MM-DD HH:MM
  ````
  - When the system receives the query, it tallies up the total sales of the restaurant from the start to the end date and time. Then, the date and time of the query, the string `SALES`, and the total sales are output, separated by spaces.
  - Example
    - `2020-12-01 13:34 calculate_sales 3cg8d 2020-10-31 17:00 2020-10-31 24:00` is to calculate the total sales of the restaurant `3cg8d`, recorded from `2020-10-31 17:00` to `2020-10-31 24:00` (`24:00` = midnight on `2020-10-31`).
@@END_EN

- システムは、配達員から特定の期間の売上を合計するための`calculate_wages`クエリを受け取る。
  - このクエリは、クエリの日時、`calculate_wages`という文字列、配達員ID、集計開始日時、集計終了日時で構成される (半角スペース区切り)。ただし集計区間の両端については、集計開始日時は区間に含み、集計終了日時は区間に含まないものとする。
  ```plain
  YYYY-MM-DD HH:MM calculate_wages 配達員ID YYYY-MM-DD HH:MM YYYY-MM-DD HH:MM
  ```
  - クエリを受け取ったら、集計開始日時から集計終了日時までの配達員の売上を合計する。そして、クエリの日時、`WAGES`という文字列および売上の合計をスペース区切りで出力する。
@@BEGIN_EN
- The system receives a `calculate_wages` query from a driver to tally up the wages for a specific period.
  - This query consists of the date and time of the query, the string `calculate_wages`, the driver ID, and the start and end date and time of the aggregation, separated by spaces. Note that the start date and time is included in the period, but the end date and time is not included in the period.
  ```plain
  YYYY-MM-DD HH:MM calculate_wages {Driver ID} YYYY-MM-DD HH:MM YYYY-MM-DD HH:MM
  ```
  - When the system receives the query, it tallies up the total wages of the driver from the start to the end date and time. Then, the date and time of the query, the string `WAGES`, and the total wages are output, separated by spaces.
@@END_EN

## 入力形式
- プログラムに与えられる入力は、標準入力を介して行われる。
  - 各行の末尾には改行コード`\n`が付与される。最終行の末尾にも改行コードが付与される。
  - 各行で入力される文字列は、単一の半角スペース` `によって区切られている。
@@BEGIN_EN
## Input format
- Input to the program is given from the standard input.
  - A newline code `\n` is placed at the end of each line. Note that a newline code is also placed at the end of the last line.
  - Each line consists of words separated by a single space ` `.
@@END_EN

- 入力は、レストランの店舗数 m、m 件のレストラン情報、そして 1 件以上 5000 件以下のクエリから構成される。
  - 1 行目には、レストランの店舗数 m が与えられる。
  - 続く m 行には、レストラン情報として、レストランID、レストランの位置および休業時間が与えられる。
  - それ以降の行には、いくつかのクエリが与えられる。クエリの数は与えられないので、標準入力の最終行まで読み込むこと。
    - 基本実装では、`order`クエリと`set_available`クエリの二種類のみが与えられる。
    - 応用実装では、最大六種類のクエリが与えられる。クエリは、`set_max_delivery_time`クエリ、`set_available`クエリ、`set_unavailable`クエリ、`order`クエリ、`calculate_sales`クエリ、`calculate_wages`クエリのいずれかである。
    - クエリの日時は、入力順にソートされている。また、同じ日時のクエリは与えられない。
@@BEGIN_EN
- The input consists of the number of restaurants \\(m\\), \\(m\\) sets of restaurant information, and between \\(1\\) and \\(5000\\) queries.
  - On the first line, the number of restaurants \\(m\\) is given.
  - On the following \\(m\\) lines, the restaurant ID, the location, and the restaurant closure periods are given as restaurant information.
  - On the following lines, queries are given. Note that your program should read all the lines from the standard input, as the number of queries is not given.
    - In the "Basic" test cases, only two types of queries are given: `order` queries and `set_available` queries.
    - In the "Advanced" test cases, up to six kinds of queries are given. The queries are one of the following: `set_max_delivery_time` query, `set_available` query, `set_unavailable` query, `order` query, `calculate_sales` query, and `calculate_wages` query.
     - The date and time of the queries are sorted by input order. Also, no queries with the same date and time are given.
@@END_EN

## 出力形式
- プログラムの出力は、標準出力に出力せよ。
- 出力を行うクエリ 1 件につき 1 行を、時系列順に出力せよ。
- 全てのクエリに対する処理を終えたら、終了コード`0`でプログラムを終了せよ。
@@BEGIN_EN
## Output format
- Print the results to the standard output.
- Output one line for each query that prints a result, in chronological order.
- When all queries have been processed, exit the program with the exit code `0`.
@@END_EN

## 入出力例
@@BEGIN_EN
## Input/output examples

@@END_EN

### 例1
入力
```plain
1
iVehD 100 0
2020-03-04 10:30 set_available Bob 50 0
2020-03-04 10:32 order iVehD 5000 140 0
2020-03-04 10:34 set_available Bob 50 0
2020-03-04 10:37 order iVehD 5000 160 0
```

出力
```plain
2020-03-04 10:32 Bob 300
2020-03-04 10:37 Bob 600
```

レストラン`iVehD`が (100, 0) にあり、クエリは以下を表す。

- `2020-03-04 10:30`に、配達員`Bob`が (50, 0) で待機中状態に入る。
- `2020-03-04 10:32`に、レストラン`iVehD`が (140, 0) に配達する必要がある 5000 円の料理の注文を受け取る。この時、待機中状態であるため配達員`Bob`が担当配達員に選ばれ、配達中状態に設定される。(50, 0) -> (100, 0) -> (140, 0) の移動は 90 m なので、送料 300 円がかかる。
- `2020-03-04 10:34`に、配達員`Bob`が (50, 0) で待機中状態に入る。
- `2020-03-04 10:37`に、レストラン`iVehD`が (160, 0) に配達する必要がある 5000 円の料理の注文を受け取る。この時、待機中状態であるため配達員`Bob`が担当配達員に選ばれ、配達中状態に設定される。(50, 0) -> (100, 0) -> (160, 0) の移動は 110 m なので、送料 600 円がかかる。

このテストケースは、基本実装に含まれる。
@@BEGIN_EN
### Example 1
Input
```plain
1
iVehD 100 0
2020-03-04 10:30 set_available Bob 50 0
2020-03-04 10:32 order iVehD 5000 140 0
2020-03-04 10:34 set_available Bob 50 0
2020-03-04 10:37 order iVehD 5000 160 0
````

Output
```plain
2020-03-04 10:32 Bob 300
2020-03-04 10:37 Bob 600
```

The restaurant `iVehD` is at \\((100, 0)\\) and the queries mean:

- At `2020-03-04 10:30`, the driver `Bob` enters the “available” state at \\((50, 0)\\).
- At `2020-03-04 10:32`, the restaurant `iVehD` receives an order for \\(5000\\) yen that needs to be delivered to \\((140, 0)\\). Since the driver `Bob` is in the “available” state, he/she is chosen as the assigned driver and his/her status is set to the “delivery” state. The delivery path is \\((50, 0)\\) -> \\((100, 0)\\) -> \\((140, 0)\\), which is \\(90\\) meters in sum. So the delivery cost is \\(300\\) yen.
- At `2020-03-04 10:34`, the driver `Bob` enters the “available” state at \\((50, 0)\\).
- At `2020-03-04 10:37`, the restaurant `iVehD` receives an order for \\(5000\\) yen that needs to be delivered to \\((160, 0)\\). Since the driver `Bob` is in the “available” state, he/she is chosen as the assigned driver and his/her status is set to the “delivery” state. The delivery path is \\((50, 0)\\) -> \\((100, 0)\\) -> \\((160, 0)\\), which is \\(110\\) meters in sum. So the delivery cost is \\(600\\) yen.


This test case is included in the "Basic" test cases.

@@END_EN

### 例2
入力
```plain
1
iVehD 100 200
2020-03-04 10:32 order iVehD 5000 200 100
```

出力
```plain
2020-03-04 10:32 ERROR NO DELIVERY PERSON
```

レストラン`iVehD`が (100, 0) にあり、クエリは以下を表す。

- `2020-03-04 10:32`に、レストラン`iVehD`が (200, 100) に配達する必要がある 5000 円の料理の注文を受け取る。しかし、待機中状態である配達員が一人もいないため、エラーを出力する。

このテストケースは、基本実装に含まれます。
@@BEGIN_EN
### Example 2
Input
```plain
1
iVehD 100 200
2020-03-04 10:32 order iVehD 5000 200 100
````

Output
```plain
2020-03-04 10:32 ERROR NO driver
```

The restaurant `iVehD` is at \\((100, 0)\\) and the query means:

- At `2020-03-04 10:32`, the restaurant `iVehD` receives an order for \\(5000\\) yen that needs to be delivered to \\((200, 100)\\). However, the system outputs an error because none of the drivers are in the “available” state.

This test case is included in the "Basic" test cases.

@@END_EN

### 例3
入力
```plain
2
Lotte 100 200
Macdn 1000 -200
2020-03-04 09:30 set_available Bob 50 -10
2020-03-04 09:33 set_available Jane 830 100
2020-03-04 10:02 order Lotte 2000 200 100
2020-03-04 10:10 set_available Kate 2030 100
2020-03-04 10:11 set_max_delivery_time Kate 10
2020-03-04 10:22 order Macdn 2000 200 100
2020-03-04 10:30 set_unavailable Kate
2020-03-04 10:32 order Lotte 2000 200 100
2020-03-04 10:40 set_available Kate 900 0
2020-03-04 10:52 order Lotte 2000 200 100
2020-03-04 23:59 calculate_sales Lotte 2020-03-04 00:00 2020-03-04 24:00
2020-03-05 00:00 calculate_wages Kate 2020-03-04 09:00 2020-03-04 12:00
```

出力
```plain
2020-03-04 10:02 Bob 600
2020-03-04 10:22 Jane 900
2020-03-04 10:32 ERROR NO DELIVERY PERSON
2020-03-04 10:52 Kate 900
2020-03-04 23:59 SALES 2500
2020-03-05 00:00 WAGES 900
```

このテストケースは、応用実装に含まれます。

@@BEGIN_EN
### Example 3
Input
```plain
2
Lotte 100 200
Macdn 1000 -200
2020-03-04 09:30 set_available Bob 50 -10
2020-03-04 09:33 set_available Jane 830 100
2020-03-04 10:02 order Lotte 2000 200 100
2020-03-04 10:10 set_available Kate 2030 100
2020-03-04 10:11 set_max_delivery_time Kate 10
2020-03-04 10:22 order Macdn 2000 200 100
2020-03-04 10:30 set_unavailable Kate
2020-03-04 10:32 order Lotte 2000 200 100
2020-03-04 10:40 set_available Kate 900 0
2020-03-04 10:52 order Lotte 2000 200 100
2020-03-04 23:59 calculate_sales Lotte 2020-03-04 00:00 2020-03-04 24:00
2020-03-05 00:00 calculate_wages Kate 2020-03-04 09:00 2020-03-04 12:00
```

Output
```plain
2020-03-04 10:02 Bob 600
2020-03-04 10:22 Jane 900
2020-03-04 10:32 ERROR NO DELIVERY PERSON
2020-03-04 10:52 Kate 900
2020-03-04 23:59 SALES 2500
2020-03-05 00:00 WAGES 900
```

This test case is included in the "Advanced" test cases.

@@END_EN

なお、期待する入出力は [test/basic_testcases.json](test/basic_testcases.json) にいくつか定義されています。実装する際の参考にしてください。
@@BEGIN_EN
Note that the expected I/O is defined in [test/basic_testcases.json](test/basic_testcases.json). Please refer to this file for implementation.
@@END_EN



